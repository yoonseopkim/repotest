# k8s/auth/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-deployment
  labels:
    app: auth
spec:
  # 기본 2개의 복제본 실행
  replicas: 2
  selector:
    matchLabels:
      app: auth
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
        - name: auth
          image: your-registry/gitfolio-auth:latest
          ports:
            - containerPort: 8080
          # 리소스 제한 설정
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          # 환경 변수 설정
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "prod"
          # ConfigMap에서 환경 변수 가져오기
          envFrom:
            - configMapRef:
                name: auth-config
            # Secret에서 민감 정보 가져오기
            - secretRef:
                name: auth-secret
          # 헬스 체크 설정
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
---
# k8s/auth/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: auth-service
spec:
  selector:
    app: auth
  ports:
    - port: 80
      targetPort: 8080
  type: ClusterIP
---
# k8s/auth/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-config
data:
  REDIRECT_ONBOARDING_URL: "https://www.gitfolio.site/onboarding"
  REDIRECT_MAIN_URL: "https://www.gitfolio.site/community"
  AUTH_REDIS_HOST: "redis-service"
  AUTH_REDIS_PORT: "6379"
---
# k8s/auth/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: auth-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: auth-deployment
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
---
# k8s/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: redis-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:alpine
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi